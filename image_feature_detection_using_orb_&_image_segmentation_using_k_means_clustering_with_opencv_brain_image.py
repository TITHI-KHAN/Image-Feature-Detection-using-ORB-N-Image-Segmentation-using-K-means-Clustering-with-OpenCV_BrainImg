# -*- coding: utf-8 -*-
"""Image Feature Detection using ORB & Image Segmentation using K-means Clustering with OpenCV_Brain Image

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HV3-hBOK-A0OjyWzeHVTvIq8n80YBV4g

**Image Feature Detection using ORB**
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt

image_path = "/content/Image.png"
# ORB - Oriented FAST and Rotated BRIEF
# FAST -- Features  from Accelerated Segmented Test
# BRIEF = Binary Robust Independent ELEMENTARY Features

image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
orb = cv2.ORB_create()
datapoints, descriptions = orb.detectAndCompute(image, None)
datapoints_annot = cv2.drawKeypoints(image, datapoints, None, color = (0, 255, 0), flags = 0)

plt.figure(figsize = (10, 10))
plt.imshow(datapoints_annot, cmap = "gray")
plt.title("ORB datapoints for Brain Image")
plt.axis("off")
plt.show()

"""**Image Segmentation using K-means Clustering with OpenCV**"""

k = 3

image_pixel = image.reshape((-1, 3))
image_pixel = np.float32(image_pixel)

criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.5)
_, labels , (centers)= cv2.kmeans(image_pixel, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

centers = np.uint8(centers)


segmented_image = centers[labels.flatten()]
segmented_image = segmented_image.reshape(image.shape)

plt.imshow(segmented_image)
plt.title("Image Segmentation")
plt.axis('off')
#plt.tight_layout()
plt.show()

k = 3

image_pixel = image.reshape((-1, 3))
image_pixel = np.float32(image_pixel)

criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 20, 0.0000000002)
_, labels , (centers)= cv2.kmeans(image_pixel, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

centers = np.uint8(centers)


segmented_image = centers[labels.flatten()]
segmented_image = segmented_image.reshape(image.shape)

plt.imshow(segmented_image)
plt.title("Image Segmentation")
plt.axis('off')
#plt.tight_layout()
plt.show()



